{"ast":null,"code":"var _jsxFileName = \"/Users/amalsony/Documents/sleep-safe/frontend/client/src/context/contact/ContactState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport contactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ContactState = props => {\n  _s();\n\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(contactReducer, initialState); // Get Contacts\n\n  const getContacts = async () => {\n    try {\n      const res = await axios.get('/api/contacts');\n      dispatch({\n        type: GET_CONTACTS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Add Contact\n\n\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({\n        type: ADD_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Update Contact\n\n\n  const updateContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.put(`/api/contacts/${contact._id}`, contact, config);\n      dispatch({\n        type: UPDATE_CONTACT,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Delete Contact\n\n\n  const deleteContact = async id => {\n    try {\n      await axios.delete(`/api/contacts/${id}`);\n      dispatch({\n        type: DELETE_CONTACT,\n        payload: id\n      });\n    } catch (err) {\n      dispatch({\n        type: CONTACT_ERROR,\n        payload: err.response.msg\n      });\n    }\n  }; // Clear Contacts\n\n\n  const clearContacts = () => {\n    dispatch({\n      type: CLEAR_CONTACTS\n    });\n  }; // Set Current Contact\n\n\n  const setCurrent = contact => {\n    dispatch({\n      type: SET_CURRENT,\n      payload: contact\n    });\n  }; // Clear Current Contact\n\n\n  const clearCurrent = () => {\n    dispatch({\n      type: CLEAR_CURRENT\n    });\n  }; // Filter Contacts\n\n\n  const filterContacts = text => {\n    dispatch({\n      type: FILTER_CONTACTS,\n      payload: text\n    });\n  }; // Clear Filter\n\n\n  const clearFilter = () => {\n    dispatch({\n      type: CLEAR_FILTER\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(contactContext.Provider, {\n    value: {\n      contacts: state.contacts,\n      current: state.current,\n      filtered: state.filtered,\n      error: state.error,\n      addContact,\n      getContacts,\n      deleteContact,\n      setCurrent,\n      clearCurrent,\n      updateContact,\n      filterContacts,\n      clearFilter,\n      clearContacts\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ContactState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ContactState;\nexport default ContactState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ContactState\");","map":{"version":3,"sources":["/Users/amalsony/Documents/sleep-safe/frontend/client/src/context/contact/ContactState.js"],"names":["React","useReducer","axios","contactContext","contactReducer","GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","ContactState","props","initialState","contacts","current","filtered","error","state","dispatch","getContacts","res","get","type","payload","data","err","response","msg","addContact","contact","config","headers","post","updateContact","put","_id","deleteContact","id","delete","clearContacts","setCurrent","clearCurrent","filterContacts","text","clearFilter","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\nimport axios from 'axios';\nimport contactContext from './contactContext';\nimport contactReducer from './contactReducer';\nimport {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR\n} from '../types';\n\nconst ContactState = props => {\n  const initialState = {\n    contacts: [],\n    current: null,\n    filtered: null,\n    error: null\n  };\n\n  const [state, dispatch] = useReducer(contactReducer, initialState);\n\n  // Get Contacts\n  const getContacts = async () => {\n\n    try {\n      const res = await axios.get('/api/contacts');\n      dispatch({ type: GET_CONTACTS, payload: res.data });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  }\n\n  // Add Contact\n  const addContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    try {\n      const res = await axios.post('/api/contacts', contact, config);\n      dispatch({ type: ADD_CONTACT, payload: res.data });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  }\n\n   // Update Contact\n   const updateContact = async contact => {\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }\n\n    try {\n      const res = await axios.put(`/api/contacts/${contact._id}`, contact, config);\n      dispatch({ type: UPDATE_CONTACT, payload: res.data });\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  }\n\n  // Delete Contact\n  const deleteContact = async id => {\n    \n    try {\n      await axios.delete(`/api/contacts/${id}` );\n      dispatch({ type: DELETE_CONTACT, payload: id});\n    } catch (err) {\n      dispatch({ type: CONTACT_ERROR, payload: err.response.msg });\n    }\n  }\n\n  // Clear Contacts\n  const clearContacts = () => {\n    dispatch({ type: CLEAR_CONTACTS});\n  }\n\n  // Set Current Contact\n  const setCurrent = contact => {\n    dispatch({ type: SET_CURRENT, payload: contact });\n  }\n\n  // Clear Current Contact\n  const clearCurrent = () => {\n    dispatch({ type: CLEAR_CURRENT});\n  }\n\n  // Filter Contacts\n  const filterContacts = text => {\n    dispatch({ type: FILTER_CONTACTS, payload: text });\n  }\n\n  // Clear Filter\n  const clearFilter = () => {\n    dispatch({ type: CLEAR_FILTER});\n  }\n\n  return (\n    <contactContext.Provider\n      value={{\n        contacts: state.contacts,\n        current: state.current,\n        filtered: state.filtered,\n        error: state.error,\n        addContact,\n        getContacts,\n        deleteContact,\n        setCurrent,\n        clearCurrent,\n        updateContact,\n        filterContacts,\n        clearFilter,\n        clearContacts\n      }}>\n      { props.children }\n    </contactContext.Provider>\n  )\n};\n\nexport default ContactState;"]},"metadata":{},"sourceType":"module"}