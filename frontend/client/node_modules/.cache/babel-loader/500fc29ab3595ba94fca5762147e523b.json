{"ast":null,"code":"import { GET_CONTACTS, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACTS:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [...state.contacts, action.payload],\n        loading: false\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact),\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload),\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/test/Desktop/contact-keeper/client/src/context/contact/contactReducer.js"],"names":["GET_CONTACTS","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","state","action","type","contacts","payload","loading","map","contact","id","filter","filtered","error","current","regex","RegExp","name","match","email"],"mappings":"AAAA,SACEA,YADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,eAPF,EAQEC,YARF,EASEC,aATF,QAUO,UAVP;AAYA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKX,YAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAFZ;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKb,WAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELG,QAAAA,QAAQ,EAAE,CAAC,GAAGH,KAAK,CAACG,QAAV,EAAoBF,MAAM,CAACG,OAA3B,CAFL;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAKT,cAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,GAAf,CAAmBC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACG,OAAP,CAAeI,EAA9B,GAAmCP,MAAM,CAACG,OAA1C,GAAoDG,OAAlF,CAFL;AAGLF,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAKZ,cAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeM,MAAf,CAAsBF,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeP,MAAM,CAACG,OAAvD,CAFL;AAGLC,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAMF,SAAKZ,cAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELG,QAAAA,QAAQ,EAAE,IAFL;AAGLO,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,KAAK,EAAE,IAJF;AAKLC,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAQF,SAAKlB,WAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELY,QAAAA,OAAO,EAAEX,MAAM,CAACG;AAFX,OAAP;;AAKF,SAAKT,aAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELY,QAAAA,OAAO,EAAE;AAFJ,OAAP;;AAKF,SAAKf,eAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELU,QAAAA,QAAQ,EAAEV,KAAK,CAACG,QAAN,CAAeM,MAAf,CAAsBF,OAAO,IAAI;AACzC,gBAAMM,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEb,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOG,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAApC;AACD,SAHS;AAFL,OAAP;;AAQF,SAAKf,YAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELU,QAAAA,QAAQ,EAAE;AAFL,OAAP;;AAIF,SAAKX,aAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELW,QAAAA,KAAK,EAAEV,MAAM,CAACG;AAFT,OAAP;;AAIF;AACE,aAAOJ,KAAP;AArEJ;AAuED,CAxED","sourcesContent":["import {\n  GET_CONTACTS,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR\n} from '../types';\n\nexport default (state, action) => {\n  switch(action.type) {\n    case GET_CONTACTS:\n      return {\n        ...state,\n        contacts: action.payload,\n        loading: false\n      }\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [...state.contacts, action.payload],\n        loading: false\n      }\n\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact),\n        loading: false\n      }\n\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(contact => contact.id !== action.payload),\n        loading: false\n      } \n\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: null,\n        filtered: null,\n        error: null,\n        current: null\n      } \n\n    case SET_CURRENT: \n      return {\n        ...state,\n        current: action.payload\n      }\n\n    case CLEAR_CURRENT: \n      return {\n        ...state,\n        current: null\n      }\n\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      } \n      \n    case CLEAR_FILTER: \n      return {\n        ...state,\n        filtered: null\n      };\n    case CONTACT_ERROR:\n      return {\n        ...state,\n        error: action.payload\n      };   \n    default: \n      return state;\n  }\n}"]},"metadata":{},"sourceType":"module"}